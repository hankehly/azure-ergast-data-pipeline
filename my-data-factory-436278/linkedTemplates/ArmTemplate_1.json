{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "my-data-factory-436278"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/03-Copy-Using-Query')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_4jv",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "dbo.FactSales"
							}
						],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT\n  dt.[ProductID],\n  dt.[SalesOrderID],\n  dt.[OrderQty],\n  dt.[UnitPrice],\n  hd.[OrderDate],\n  hd.[CustomerID],\n  hd.[TaxAmt]\nFROM\n  [SalesLT].[SalesOrderDetail] dt\nLEFT JOIN\n  [SalesLT].[SalesOrderHeader] hd\nON\n  dt.[SalesOrderID] = hd.[SalesOrderID]\n",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlDWSink",
								"writeBehavior": "Insert"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ProductID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ProductID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "SalesOrderID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "SalesOrderID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "OrderQty",
											"type": "Int16",
											"physicalType": "smallint"
										},
										"sink": {
											"name": "OrderQty",
											"type": "Int16",
											"physicalType": "smallint"
										}
									},
									{
										"source": {
											"name": "UnitPrice",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "UnitPrice",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										}
									},
									{
										"source": {
											"name": "CustomerID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CustomerID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "OrderDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "OrderDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "TaxAmt",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "TaxAmt",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_4jv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_4jv",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-09T03:59:38Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ergast-Ingest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Seasons",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Seasons",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Bronze",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-13T00:28:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv-logdata-to-synapse-appdb')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_obk",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "csv//Log.csv"
							},
							{
								"name": "Destination",
								"value": "dbo.logdata"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"writeBehavior": "Insert"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Correlation id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Correlation id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Operation name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Operation name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Status",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Event category",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Event category",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Level",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Level",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Time",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Time",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Subscription",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Subscription",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Event initiated by",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Event initiated by",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Resource type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Resource type",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Resource group",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Resource group",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Resource",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Resource",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_obk",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_obk",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-09T01:54:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimProduct')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sampleappdb_SalesLT_Product",
								"type": "DatasetReference"
							},
							"name": "Product",
							"description": "Import data from sampleappdb_SalesLT_Product"
						},
						{
							"dataset": {
								"referenceName": "sampleappdb_SalesLT_ProductCategory",
								"type": "DatasetReference"
							},
							"name": "ProductCategory"
						},
						{
							"dataset": {
								"referenceName": "sampleappdb_SalesLT_ProductModel",
								"type": "DatasetReference"
							},
							"name": "ProductModel"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "workspace54378_appdb_DimProduct",
								"type": "DatasetReference"
							},
							"name": "DimProduct"
						}
					],
					"transformations": [
						{
							"name": "ProductJoinProductCategory"
						},
						{
							"name": "ProductJoinProductCategoryJoinProductModel",
							"description": "Left outer join on 'ProductJoinProductCategory' and 'ProductModel'"
						},
						{
							"name": "SelectNecessaryColumnsOnly"
						},
						{
							"name": "AddProductSK"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Product",
						"source(output(",
						"          ProductCategoryID as integer,",
						"          ParentProductCategoryID as integer,",
						"          Name as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductCategory",
						"source(output(",
						"          ProductModelID as integer,",
						"          Name as string,",
						"          CatalogDescription as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductModel",
						"Product, ProductCategory join(Product@ProductCategoryID == ProductCategory@ProductCategoryID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ProductJoinProductCategory",
						"ProductJoinProductCategory, ProductModel join(Product@ProductModelID == ProductModel@ProductModelID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ProductJoinProductCategoryJoinProductModel",
						"ProductJoinProductCategoryJoinProductModel select(mapColumn(",
						"          ProductID,",
						"          ProductModelID = Product@ProductModelID,",
						"          ProductCategoryID = Product@ProductCategoryID,",
						"          ProductName = Product@Name,",
						"          ProductModelName = ProductModel@Name,",
						"          ProductCategoryName = ProductCategory@Name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectNecessaryColumnsOnly",
						"SelectNecessaryColumnsOnly keyGenerate(output(ProductSK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> AddProductSK",
						"AddProductSK sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductSK as integer,",
						"          ProductID as integer,",
						"          ProductModelID as integer,",
						"          ProductCategoryID as integer,",
						"          ProductName as string,",
						"          ProductModelName as string,",
						"          ProductCategoryName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductSK,",
						"          ProductID,",
						"          ProductModelID,",
						"          ProductCategoryID,",
						"          ProductName,",
						"          ProductModelName,",
						"          ProductCategoryName",
						"     )) ~> DimProduct"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FactSales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sampleappdb_salesorderdetail",
								"type": "DatasetReference"
							},
							"name": "SalesOrderDetail"
						},
						{
							"dataset": {
								"referenceName": "sampleappdb_salesorderheader",
								"type": "DatasetReference"
							},
							"name": "SalesOrderHeader"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "workspace54378_appdb_factsales",
								"type": "DatasetReference"
							},
							"name": "FactSales"
						}
					],
					"transformations": [
						{
							"name": "SalesOrderDetailJoinSalesOrderHeader"
						},
						{
							"name": "SelectColumnsOfInterest"
						},
						{
							"name": "AddTotalAmountColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          SalesOrderDetailID as integer,",
						"          OrderQty as integer,",
						"          ProductID as integer,",
						"          UnitPrice as decimal(19,4),",
						"          UnitPriceDiscount as decimal(19,4),",
						"          LineTotal as decimal(38,6),",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SalesOrderDetail",
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SalesOrderHeader",
						"SalesOrderDetail, SalesOrderHeader join(SalesOrderDetail@SalesOrderID == SalesOrderHeader@SalesOrderID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> SalesOrderDetailJoinSalesOrderHeader",
						"SalesOrderDetailJoinSalesOrderHeader select(mapColumn(",
						"          ProductID,",
						"          SalesOrderID = SalesOrderDetail@SalesOrderID,",
						"          OrderQty,",
						"          UnitPrice,",
						"          CustomerID,",
						"          OrderDate,",
						"          TaxAmt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsOfInterest",
						"SelectColumnsOfInterest derive(TotalAmount = multiply(OrderQty, UnitPrice)) ~> AddTotalAmountColumn",
						"AddTotalAmountColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductID as integer,",
						"          SalesOrderID as integer,",
						"          OrderQty as integer,",
						"          UnitPrice as decimal(19,4),",
						"          CustomerID as integer,",
						"          OrderDate as timestamp,",
						"          TaxAmt as decimal(19,4),",
						"          TotalAmount as decimal(19,4)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductID,",
						"          SalesOrderID,",
						"          OrderQty,",
						"          UnitPrice,",
						"          CustomerID,",
						"          OrderDate,",
						"          TaxAmt,",
						"          TotalAmount",
						"     )) ~> FactSales"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-MappingDataFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "04-MappingDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FactSales",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SalesOrderDetail": {},
									"SalesOrderHeader": {},
									"FactSales": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "datalake78543_service",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DimProduct",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Product": {},
									"ProductCategory": {},
									"ProductModel": {},
									"DimProduct": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "datalake78543_service",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-10T01:31:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FactSales')]",
				"[concat(variables('factoryId'), '/dataflows/DimProduct')]"
			]
		}
	]
}